import os
from processing.preprocessing.format_converter import convert_to_mp4


WAREHOUSE_ID = "warehouse_001"
VIDEOS_DIR = f"data/videos/{WAREHOUSE_ID}"
FRAMES_DIR = f"data/frames/{WAREHOUSE_ID}"

all_files = [
    f for f in os.listdir(VIDEOS_DIR)
    if os.path.isfile(os.path.join(VIDEOS_DIR, f))
]


# ’Ü’°’≠ ’æ’•÷Ä’°÷É’∏’≠’•’¨ ’¢’∏’¨’∏÷Ä .MOV, .avi, .mkv ÷Ü’°’µ’¨’•÷Ä’® mp4 ’±÷á’°’π’°÷É’´
converted = []
for f in all_files:
    input_path = os.path.join(VIDEOS_DIR, f)
    mp4_path = convert_to_mp4(input_path)
    if mp4_path:
        converted.append(os.path.basename(mp4_path))

# ’é’•÷Ä’ª’∂’°’Ø’°’∂ mp4 ÷Ü’°’µ’¨’•÷Ä’´ ÷Å’°’∂’Ø
video_files = [f for f in converted if f.endswith(".mp4")]


print(f"\nüìÇ ‘≥’ø’∂’æ’•÷Å’´’∂ {len(video_files)} ’æ’´’§’•’∏’∂’•÷Ä’ù {VIDEOS_DIR} ’∫’°’∂’°’Ø’∏÷Ç’¥\n")

for video_file in video_files:
    video_name = video_file.split(".")[0]
    frame_output_dir = os.path.join(FRAMES_DIR, video_name)

    if os.path.exists(frame_output_dir):
        print(f"‚è≠Ô∏è ‘±’∂÷Å’∂’∏÷Ç’¥ ’•’∂÷Ñ {video_file} ‚Äì ’°÷Ä’§’•’∂ ’æ’•÷Ä’¨’∏÷Ç’Æ’æ’°’Æ ’ß÷â")
        continue

    print(f"üîÑ ’é’•÷Ä’¨’∏÷Ç’Æ’∏÷Ç’¥ ’•’∂÷Ñ {video_file} ...")
    print(f"üìç ’è’•’Ω’°’∂’µ’∏÷Ç’©’´ ’∏÷Ç’≤’´’∂: {os.path.join(VIDEOS_DIR, video_file)}")
    print(f"üìÅ ’ñ÷Ä’•’µ’¥’•÷Ä’® ’Ø’∫’°’∞’æ’•’∂ ’°’µ’Ω’ø’•’≤: {frame_output_dir}")

    from processing.preprocessing.video_loader import load_video
    from processing.preprocessing.cutter import cut_video_into_frames
    from processing.preprocessing.rotation_helper import get_rotation_angle

    original_path = os.path.join(VIDEOS_DIR, video_file)

    # ’ì’∏’≠’•’¨ .MOV ’Ø’°’¥ ’°’µ’¨ ÷Ü’∏÷Ä’¥’°’ø’∂’•÷Ä ‚Üí mp4
    video_path = convert_to_mp4(original_path)

    if not video_path:
        print(f"‚ùå ‘≤’°÷Å ’©’∏’≤’∂’æ’•÷Å {video_file} ‚Äì ’π’´ ’∞’°’ª’∏’≤’æ’•’¨ mp4 ’§’°÷Ä’±’∂’•’¨÷â")
        continue


    # ’ç’è‘±’Ü‘±‘º ’ä’è’è’Ñ‘±’Ü ‘±’Ü‘ø’Ö’à’í’Ü‘∏
    rotation = get_rotation_angle(video_path)
    print(f"‚Ü©Ô∏è ’é’´’§’•’∏’∂ ’∏÷Ç’∂’´ {rotation}¬∞ ’∫’ø’ø’∏÷Ç’¥÷â")

    cap = load_video(video_path)
    cut_video_into_frames(cap, frame_output_dir, rotation=rotation)

